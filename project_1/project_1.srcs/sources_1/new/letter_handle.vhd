LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all; 

ENTITY alphabet IS
	PORT (
	    clock: in std_logic;
	    rom_enable: in std_logic;
		x: in unsigned (10 downto 0);
		y: in unsigned (10 downto 0);
		char: in unsigned (4 downto 0); 
		res: in integer;
		size: in integer ;
		output: out std_logic_vector (11 downto 0)
		);
END entity;

ARCHITECTURE Behavioral OF alphabet IS 
    signal address: unsigned (9 downto 0);
    signal output_mem: std_logic_vector (11 downto 0); 
    constant mem: std_logic_vector (1023 downto
BEGIN  
    address <= shift_right((shift_right(x,res)+5*shift_right(y,res))+char*25,0) (9 downto 0);
	PROCESS (clock) is
	BEGIN
	   if (rising_edge(clock)) then
	       if rom_enable = '1' then
	           output_mem<=(others => mem(TO_INTEGER (address)));
	       end if;
	   end if;
	END PROCESS;
	output <= output_mem when x<5*size else   
          "111100000000";	
END Behavioral; 